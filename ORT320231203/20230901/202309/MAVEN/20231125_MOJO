Maven build lifecycle
maven lifecycle standardized the build process by defining the phases in which the build will be carried for any java project. Due to this the build abstraction has been achieved.
without knowing the details of how to build an java application we can build the project, because for any java project the build process has been standardized and fixed across, so no prior knowledge about the build script or build activities is required for build a project while working with maven.
	
There are 3 standard lifecycles are defined by the maven
1. default
2. clean
3. site

In each lifecycle it has defined fixed number stages called "phases". per each phase pre-defined plugins/goals are associated. Based on the stage to which we want to build the project we need specify the phase name asking the maven to execute the build. upon specifying the phase all the phases from top in the sequential order upto the phase we specified will be executed.
	
1. default lifecycle phases:
1.1 validate
1.2 compile
1.3 test
1.4 package
1.5 integration-tests
1.6 verify
1.7 install
1.8 deploy

2. clean lifecycle phases:
2.1 clean

3. site lifecycle phases:
1. site
---------------------------------------------------------------------------------------------------------------------------------------------
How to create our own plugin and associate it to the build process for an project?
There are lot of pre-defined plugins are provided by the maven, additionally several third-parties also created plugins and distributed them through maven central repository. However we might find sometimes these plugins are not sufficient and have to develop our own.
	
To create the plugin in maven we need
1. create an maven project defined with gav coordinates of the plugin
groupId=pluginGroupId [tools.org]
artifactId=pluginArtifactId [dependencyanalyzer-maven-plugin]
version=pluginVersion [1.0.0]
packaging=maven-plugin

2. add plugin api dependencies
Maven has provided plugin api classes that we need to use in create an plugin component. A plugin in maven is called "Mojo", maven old java object. A plugin class should be written by extending or implementing standard interfaces provided by maven, unless maven dont know how to invoke the plugin. A plugin component inturn wants to access the information about the project for which it is executing, for accessing such information maven has provided api classes.
	
all these plugin and project api classes are provided as dependencies
maven-plugin-api
maven-plugin-annotation
maven-project

we need to add the above dependencies into the maven plugin project.
instead of we manually setting up the maven plugin project, we can use maven-archetype-mojo archetype.	
	
while creating an plugin, maven has provided standard naming conventions. Each maven standard plugin starts with "maven-" and should be avoided or discourage to use. Instead maven recommends the plugin name to be "<yourplugin>-maven-plugin".
	
3. create the Mojo class
We need to write Mojo class by either implementing from Mojo interface or extend from AbstractMojo class.
Let us write a plugin that displays the names of all the dependencies of a project:

@Mojo(name="analyze")
public class DependencyAnalyzerMojo extends AbstractMojo {
	@Parameter(defaultValue="${project}", required=true, readonly=true)
	MavenProject project;
	
	public void execute() throws MojoExecutionException, MojoFailureException {
		List<Dependency> dependencies = project.getDependencies();
		dependencies.stream().forEach(dependency->{
			getLog().info(dependency.getName());
		});
	}
}
	
4. install the plugin into local maven repository
mvn clean install

5. we can run this plugin 
1. either directly using 
mvn groupId:artifactId:version:goal

or we can associate this plugin aspart of the build phases in another project.
2.
Let us create another maven project in which we configure this plugin/goal to be executed aspart of an phase.
	
basicjava
|-src
	|-main
		|-resources
		|-java
|-pom.xml

pom.xml
--------
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>tools.org</groupId/>
	<artifactId>basicjava</artifactId>
	<version>1.0.0</version>
	
	<dependencies/>
	
	<build>
		<plugins>
			<plugin>
				<groupId>tools.org</groupId>
				<artifactId>dependencyanalyzer-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>analyze</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>


sonarqube
jacoco
----------
junit basics
log4j basics





gradle
junit/mockito
spring mockito testcases
log4j
























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
































